P387●手書き数字データセットを読み込むfrom sklearn import datasetsdigits = datasets.load_digits()●データセットに納められているものを調べるdir(digits)P388●digitsデータセットの説明文を読むprint(digits.DESCR)●データの構造を調べるdigits.data.shapedigits.target.shapeP389●数字の画像データを確かめるdigits.data●正解の数値が入ったターゲットデータを確かめるdigits.target●1文字目の画像データdigits.data[0]P390●1文字目の画像データを8行8列で見てみるdigits.images[0]     # 1文字目の画像データ●画像データから手書き文字を復元するimport matplotlib.pyplot as pltplt.matshow(digits.images[0], cmap="Greys")plt.show()●ターゲットデータで正解を調べてみるdigits.target[0]P391●訓練データとテストデータを用意するn_train = len(digits.data)*2//3 # データの2/3の個数X_train = digits.data[:n_train]   # dataの前半 2/3y_train = digits.target[:n_train]   # targetの前半 2/3X_test = digits.data[n_train:]    # dataの後半 1/3y_test = digits.target[n_train:]    # targetの後半 1/3P392●構造を確認するprint([d.shape for d in [X_train, y_train, X_test, y_test]])●学習器SVMで学習を行うfrom sklearn import svm       # svmをインポートするclf = svm.SVC(gamma=0.001)    # 学習器clf.fit(X_train, y_train)     # 訓練データと教師データで学習する●テストデータで正答率を調べるprint(clf.score(X_test, y_test))0.9632721202P393●学習済みモデルが誤って分類した個数を調べるpredicted = clf.predict(X_test)(y_test != predicted).sum()●学習結果の評価レポートfrom sklearn import metricsprint(metrics.classification_report(y_test, predicted))P394●数字ごとに正解数と読み間違えた数字を調べるprint(metrics.confusion_matrix(y_test, predicted))●画像イメージと分類結果（404～415の12文字を表示）import matplotlib.pyplot as pltimgs_yt_preds = list(zip(digits.images[n_train:], y_test, predicted))for index, (image, y_t, pred) in enumerate(imgs_yt_preds[404:416]):P396［MEMO］SVCのパラメータを確認するfrom sklearn import svmclf = svm.SVC(gamma=0.001)clf