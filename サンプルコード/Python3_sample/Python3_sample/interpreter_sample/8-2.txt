P203●和集合：すべてのセットの要素を合わせたセットを作るa = {"リンゴ", "みかん", "桃", "いちご"}b = {"いちご", "スイカ", "みかん", "バナナ"}c = a | b    # 和集合を求めるc●セットa、b、cの和集合を求めるa = {"リンゴ", "みかん", "桃", "いちご"}b = {"いちご", "スイカ"}c = {"みかん", "バナナ"}d = a | b | c    # 和集合を求めるd●union()を使って和集合を求めるset1 = {1, 2, 3}list1 = [2, 4, 6, 8]list2 = [3, 6, 9]data = set1.union(list1, list2)    # 和集合を求めるdataP204●積集合：a、bセットの共通した要素のセットcを作るa = {"リンゴ", "みかん", "桃", "いちご"}b = {"いちご", "スイカ", "みかん", "バナナ"}c = a & b    # 積集合を求めるcP205●セットa、b、cの積集合を&演算子を使って求めるa = {"リンゴ", "みかん", "桃", "いちご"}b = {"いちご", "スイカ", "みかん", "バナナ"}c = {"いちご", "リンゴ"}d = a & b & c    # 積集合を求めるd●セットa、b、cの積集合をintersection()を使って求めるd = a.intersection(b, c)    # 積集合を求めるd●差集合：aからbに含まれている要素を取り除いたセットを作るa = {"リンゴ", "みかん", "桃", "いちご"}b = {"いちご", "スイカ", "みかん", "バナナ"}c = a - b    # 差集合を求めるc●difference()を使って差集合を求めるc = a.difference(b)    # 差集合を求めるcP206●対称差：a、bセットの片方だけに含まれている要素のセットを作るa = {"リンゴ", "みかん", "桃", "いちご"}b = {"いちご", "スイカ", "みかん", "バナナ"}c = a ^ b    # 対称差集合を求めるc●symmetric_difference()を使って対称差集合を求めるc = a.symmetric_difference(b)    # 対称差集合を求めるcP207●セットの値を和集合で更新するdata = {"red", "blue"}data2 = {"blue", "yellow"}data3 = {"blue", "green"}data.update(data2, data3)    # 和集合で更新するdata●|= 演算子を使って和集合の代入を書いた場合data = {"red", "blue"}data2 = {"blue", "yellow"}data3 = {"blue", "green"}data |= data2    # 和集合で置き換えるdata |= data3    # 和集合で置き換えるdata●セットの値を積集合で置き換えるdata = {"red", "blue", "green", "yellow"}data2 = {"blue", "black", "yellow"}data.intersection_update(data2)    # 積集合で更新するdataP208●&= 演算子を使って積集合の代入を書いた場合data = {"red", "blue", "green", "yellow"}data2 = {"blue", "black", "yellow"}data &= data2    # 積集合で置き換えるdata●セットの値を差集合で置き換えるdata = {"red", "blue", "green", "yellow"}data2 = {"blue", "black", "yellow"}data.difference_update(data2)    # 差集合で更新するdata●-= 演算子を使って差集合の代入を書いた場合data = {"red", "blue", "green", "yellow"}data2 = {"blue", "black", "yellow"}data -= data2    # 差集合で置き換えるdata●セットの値を対称差集合で置き換えるdata = {"red", "blue", "green", "yellow"}data2 = {"blue", "black", "yellow"}data.symmetric_difference_update(data2)    # 対称差集合で更新するdataP209●^= 演算子を使って対称差集合の代入を書いた場合data = {"red", "blue", "green", "yellow"}data2 = {"blue", "black", "yellow"}data ^= data2    # 対称差集合で置き換えるdata●２つのセットの要素が一致するときTruea = {1, 2, 3}b = {3, 2, 1}c = {1, 2, 3, 4}a == b   # aとbが一致するときTruea == cP210●２つのセットの要素が一致しないときTruea = {1, 2, 3}b = {3, 2, 1}c = {1, 2, 3, 4}a != b   # aとbが一致しないときTruea != c●共通している要素があるかないかを確かめるa = {"earth", "wind", "fire"}b = {"sky", "sea"}c = {"fire", "water"}a.isdisjoint(b)  # aとbには共通要素がないa.isdisjoint(c)P211●aセットがbセットのサブセットかどうかを判定するa = {"blue", "red"}b = {"blue", "green", "red", "pink", "white"}a.issubset(b)    # aはbのサブセットであるa <= bP212●aセットがbセットのスーパーセットかどうかを判定するa = {1999, 2011, 2013, 2014, 2016, 2017}b = {2011, 2013, 2014}a.issuperset(b)    # aはbのスーパーセットであるa >= b