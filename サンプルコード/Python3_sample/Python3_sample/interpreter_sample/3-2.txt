P48●print()で値を表示するprint(100)a = 200print(a)print(1+2)●print()で式の結果を表示するa = 100; b = 200print(a+b)●print()で複数の値を表示するa = 100; b = 200; c = 300print(a, b, c)P50●整数を使った計算a = -3b = 0c = 5a + b + c●浮動小数点（小数点がある数値）a = 0.08b = 98.5c = -3.5print(a, b, c)●整数部または小数点以下の0を省略した書き方a = .99b = 10.print(a, b)●指数表記の浮動小数点1.23e+79.6e-4P51●整数と浮動小数点の計算10.3 + 0.510 - 1.23120 * 0.11.08 * 100●整数同士の割り算120 / 2●小数点以下を四捨五入するround(23.5)●小数点以下２位を四捨五入するv = 23.51round(v*10)/10P52●２進数、8進数、16進数の数値0b0101    # 2進数0o011    # 8進数0xFF    # 16進数●2進数の足し算0b0101 + 0b0010●2進数の計算結果を文字列で出力するbin(0b0101 + 0b0010)●1j の２乗が -1 になるかどうか確かめる1j * 1jP53●複素数同士の足し算a = (1.5 + 3j)b = (2 + 1j)a + b●複素数同士の掛け算(10+2j) * (2+5j)●複素数の実部と虚部を取り出すv = 3 + 2jv.realv.imag●複素数をcomplex(re, im)で作るv = complex(3, 2)vP54●350個のボールを12個ずつ箱に入れるall = 350  # 全部の個数per = 12  # 1箱に12個入れるall // per  # 完成する箱数all % per  # 余る個数●2の3乗2**3P55●文字列の例msg = "こんにちは"where = "箱根"language = "Python 3"print(msg, where, language)●ダブルクォートを含んだ文字列ai = 'いわゆる"人工知能"です。'print(ai)●シングルクォートを含んだ文字列ai = "いわゆる'人工知能'です。"print(ai)●改行を含んだ文字列colors = "選んだ色は\n緑\n黄色"print(colorsP56●ダブルクォートを含んだ文字列msg = "それは\"Python 3\"です。"print(msg)●"""で囲んだ複数行の文字列poem = """ほとどぎす鳴きつる方をながむればただ有明の月ぞ残れる"""poem●複数行の文字列をprint()で出力するprint(poem)●\nを入力した複数行の文字列neko = "我が輩は猫である。\n名前はまだ無い。"print(neko)P57●文字列を連結するname = "鈴木" + "さん"name●変数にa、b、cに入れた文字列を連結した文字列を作るa = "Pen"b = "Pine"c = "Appple"d = a + b + cdP58●数値と文字列を連結するとエラーになるprice = 2500 + "円"●数値を文字列に変換して連結するprice = str(2500) + "円"price●計算結果を文字列に変換して連結するtanka = 80kosu = 3price = str(tanka * kosu) + "円"price●複数文字の繰り返しを作る"a" * 3"abc" * 3●文字の繰り返しを棒グラフ代わりにするsymbol = "*"print("東京", symbol * 12)print("金沢", symbol * 6)P59●文字を取り出すid = "ab1cd9x"id[2]id[-1]●文字位置の値を変更できないid[2] = "w"P60●部分文字列を取り出すs = "The quick brown fox jumps."s[:]s[4:]s[4:4+5]s[:-7]●文字列の長さを超えた範囲を指定するs = "The quick brown fox jumps over the lazy dog."len(s) # 文字列の長さを調べるs[:50] # 文字列の長さを越えた範囲P61●文字列から１つ飛ばしで文字を取り出すnum = "0123456789"num[::2]●4文字目から1文字飛ばしで取り出すdata = "abc0123456789"data[3::2]●文字列の後ろから１つ飛ばしで文字を取り出すnum = "0123456789"num[::-2] # 後ろから１文字飛ばし●文字列を逆順にするs = "あいうえおかきくけこ"s[::-1]P62●値が等しければ True、等しくなければ Falsea = 3 ; b = 3 ; c = 5print(a == b)Trueprint(a == c)●値が等しくないとき True、等しいときFalsea = 3 ; b = 3 ; c = 5print(a != b)Falseprint(a != c)●aがbより大きいときTruea = 60 ; b = 45print(a > b)●aが50以上のときTruea = 50print(a >= 50)P63●ageが16なのでTrueage = 1613 <= age < 20●論理積True and True●論理和True and FalseTrue or TrueTrue or FalseFalse or FalseP64●否定not Truenot False●変数aが50以上かつ100以下のときTrue。80なのでTruea = 80(a >= 50) and (a <= 100)●変数aが50以上かつ100以下のときTrue。110なのでFalsea = 110(a >= 50) and (a <= 100)●変数a、bのどちらかが"OK"ならばTrue。変数bが"OK"なのでTruea = "NG" ; b = "OK"(a == "OK") or (b == "OK")［MEMO］1と0True + False    # 1 + 0 で計算True + True    # 1 + 1 で計算1 and 1    # True and Trueと同じ1 or 0P65［MEMO］True、False、1、0以外の値が論理式で使われたとき2 or 3    # 左項を採用2 and 3   # 右項を採用P66●左に1桁シフトすると値が２倍になるa = 0b001011aa << 1●左にシフトされた値を２進数表記で確認するa = 0b001011bin(a << 1)●ビットマスクで下３桁を取り出すa = 0b100110bin(a & 0b111)●途中の2ビットを取り出すa = 0b10101bin((a>>1) & 0b11)P67●値の型を調べるtype(1)●float型とstr型n = 12.3 ; name = "山田"type(n)type(name)●文字列と数値を +演算子で連結しようとするとエラーになるlen = 10 * 1.23ans = "長さ" + len + "cm"●数値をstr()で文字列にして連結するans = "長さ" + str(len) + "cm"ansP68●str()で論理値を文字列に型変換するans = "5<10は" + str(5<10) + "です"ans●文字列を数値に型変換して数値計算するint("250") * 3   # 整数に型変換750float("1.5") + 0.2   # 浮動小数点に型変換●浮動小数点を整数にするint(12.9)［MEMO］数値を2進数、8進数、16進数で表記した文字列に変換するbin(10)oct(10)hex(10)