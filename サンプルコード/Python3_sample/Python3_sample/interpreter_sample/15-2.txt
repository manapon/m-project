P353●配列の先頭、2番目、最後の要素を調べるa = np.array([10, 20, 30, 40, 50])a[0]a[1]a[-1]●配列の３番目の値を99に変更するaa[2] = 99aP354●３行３列の配列の要素にアクセスするdata = [10, 20, 30, 40, 50, 60, 70, 80, 90]a = np.array(data).reshape(3, 3)aa[0,0]a[1,0]a[1,1]a[2,-1]●１次元配列aから２次元配列bを作るa = np.array([10, 20, 30, 40])b = a.reshape(2, 2)abP355●reshape()で作った配列bを変更すると元の配列aも変更されるa is b    # 同じオブジェクトではないb[0,0] = 99    # 配列bの要素を99に書き替えるba     #  配列aの要素も99に書き替わってしまった●配列をスライスするdata = np.array([0, 10, 20, 30, 40, 50, 60, 70, 80, 90])data[:]    # すべての要素（複製したことになります）data[:4]   # 最初からインデックス番号3までdata[4:]   # インデックス番号4から最後までdata[3:7]  # インデックス番号3～6data[::2]  #  先頭から１個飛び●要素を逆順にした配列を作るdata[::-1]    # 末尾から1個ずつ取り出すP356●多次元配列のスライスdata = [10, 20, 30, 40, 50, 60, 70, 80, 90]a = np.array(data).reshape(3, 3)aa[:2,]a[:,1:]array([[20, 30],a[1:,1:]●スライスと同時に型変換するdata = [2.1, 3.5, 2.5, 4.3, 5.1, 1.6]a = np.array(data).reshape(3, 2)aa2 = a[:2,].astype(int)    # 最初の2行を取り出す際に整数に変換するa2P357●配列の要素を順に取り出すdata = np.array([0, 10, 20, 30, 40, 50, 60, 70, 80, 90])for item in data:    print(item)●enumerate()を使って要素を順に取り出すwords = ["flower", "bird", "wind", "moon"]for i, item in enumerate(words, 1):    print(i, item)●多次元配列の要素を順に取り出すdata = np.array([10, 20, 30, 40, 50, 60]).reshape(2, 3)print(data)[[10 20 30] [40 50 60]]for i, item in np.ndenumerate(data):    print(i, item)P358●5以上の値を抽出するa = np.array([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9, 3])a[a>=5]●偶数、奇数を分けるa[a%2 == 0]    # 偶数a[a%2 == 1]    # 奇数●多次元配列から5より大きな値を抽出するb = a.reshape(4, 4)    # 4×4の配列にするbarray([[3, 1, 4, 1],b[b>5]P359●5以上の奇数a = np.array([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9, 3])a[(a>=5) & (a%2 == 1)]●2または3の倍数a[(a%2 == 0) | (a%3 == 0)]●3の倍数ではない値a[~(a%3==0)]●偶数は0、奇数は1に置き換えるa = np.array([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9, 3])a = a.reshape(4, 4)aarray([[3, 1, 4, 1],a[a%2==0] = 0    # 偶数を0に置き換えるaarray([[3, 1, 0, 1],a[a%2==1] = 1    # 奇数を1に置き換えるaP360●sort()メソッドで配列を昇順にソートするa = np.array([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9, 3])a.sort()a●sort()関数でリストからソート済みの配列を作るa = np.sort([4, 6, 3, 9, 1, 2, 5])a●降順にソート済みの配列を作るa = np.array([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9, 3])a_descend = np.sort(a)[::-1]  # ソートした後で逆順にスライスするa_descend