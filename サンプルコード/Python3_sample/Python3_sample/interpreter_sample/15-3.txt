P361●配列のすべての要素に5を足すimport numpy as npA = np.array([10, 20, 30, 40]).reshape(2, 2)print(A)B = A + 5print(B)●配列に対して引き算、掛け算、割り算を行うprint(A)A - 5A * 2A / 2P362●ベクトルaを行列Aで表すp0 = np.array((1, 1))p1 = np.array((6, 4))A = p1 - p0A●ベクトルaの長さa_norm = np.linalg.norm(A)a_norm●ベクトルaの2倍の長さのベクトルA2 = A*2A2a2_norm = np.linalg.norm(A*2)a2_normP363●配列の要素を合計するA = np.array([56, 45, 83, 67, 59, 41]).reshape(2, 3)print(A)A.sum()    # 全体の合計A.sum(0)    # 各列の合計A.sum(1)    # 各行の合計●配列の最大値、最小値を求めるA.max()    # 全体の最大値A.max(0)   # 各列の最大値A.max(1)   # 各行の最大値A.min()    # 全体の最小値A.min(0)   # 各列の最小値A.min(1)   # 各行の最小値A.mean()    # 全体の平均A.mean(0)    # 各行の平均値A.mean(1)    # 各列の平均値●numpyの関数を使う場合の書き方np.sum(A)    # Aの合計値np.max(A,1)    # Aの各行の最大値P364●5より大きい要素が入っている位置を調べるA = np.array([4, 6, 3, 1, 7, 3])B = (A>5)    # 5より大きい要素が入っている位置をTrueにするprint(B)P365●同じ行列数の配列の足し算A = np.array([1, 2, 3, 4]).reshape(2, 2)print(A)B = np.array([10, 20, 30, 40]).reshape(2, 2)print(B)C = A + B    # 同じ行列数の配列の足し算print(C)●同じ行列数の配列の掛け算、割り算D = A * BE = A / Bprint(D)print(E)P366●ベクトルaとbを足したベクトルcを求めるA = np.array([5, 3])B = np.array([4, -2])C = A + BC●ベクトルaからbを引いたベクトルcを求めるC = A - BCP367●行数が足りない配列を足すA = np.array([1, 2, 3, 4]).reshape(2, 2)print(A)B = np.array([100, 200])print(B)C = A + B    # 行数が足りない配列を足すprint(C)●列数が足りない配列を足すA = np.array([1, 2, 3, 4, 5, 6]).reshape(2,3)print(A)B = np.array([10, 20]).reshape(2,1)print(B)C = A + B    # 列数が足りない配列を足すprint(C)P368●行列の内積A = np.array([[1, 2],[3, 4]])B = np.array([[5, 6],[7, 8]])C = np.dot(A, B)print(C)P369●仕事を内積dot()で計算するF = np.array([8.66, 5.0])  # ベクトルFS = np.array([20, 0])  # ベクトルSW = np.dot(F, S)  # 仕事（内積）を求めるW●dot()の結果を検算するf = np.linalg.norm(F)  # ベクトルFの長さs = np.linalg.norm(S)  # ベクトルSの長さrad = np.radians(30)  # 30度をラジアンに換算w = f*s*np.cos(rad)  # 仕事を計算するwP370●3次元ベクトルa、bの外積となるベクトルcを求めるa = np.array([1, 2, 0])b = np.array([0, 1, -1])c = np.cross(a, b)  # 外積c●math.sin()とnumpy.sin()の違いimport mathimport numpy as npdata = [0.0, 0.28, 0.57, 0.85, 1.14, 1.42, 1.71, 1.99, 2.28, 2.57, 2.85, 3.14]math.sin(data)np.sin(data)P371●配列の値でSinグラフを描くimport matplotlib.pyplot as pltX = np.linspace(-np.pi, np.pi, 180)Y = np.sin(X)plt.plot(X, Y)    # グラフを作図するplt.show()